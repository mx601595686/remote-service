/*
* 抽象化一个与远端连接的通信端口。通过这个类隔开了内部代码与用户外部实现，用户可以通过任何方式来与服务建立连接,来进行消息的传递。
* 通信端口提供者必须自行处理端口端口连接后应当采取的措施
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MessageData_1 = require("./MessageData");
const ServiceController_1 = require("../service/ServiceController");
class ConnectionPort {
    /**
     *
     * @param {string} serviceName 使用该接口的服务名称
     * @param {string[]} importServices 该服务引用的外部服务名
     *
     * @memberOf ConnectionPort
     */
    constructor(serviceName, importServices) {
        this.serviceName = serviceName;
        this.importServices = importServices;
        importServices.push(ServiceController_1.ServiceController.controllerName);
    }
    //内部发送消息，在发送消息前会对发送的消息进行验证
    _sendMessage(message) {
        message.sender = this.serviceName;
        if (!this.importServices.includes(message.receiver)) {
            if (message.type === MessageData_1.MessageType.invoke) {
                this._onMessage(MessageData_1.default.prepareResponseInvoke(message, new Error(`The calling service '${message.receiver}' is not in the service list`)));
            }
        }
        else {
            this.onSendMessage(message);
        }
    }
    ;
    receiveMessage(message) {
        if (message.receiver === this.serviceName) {
            this._onMessage(message);
        }
    }
}
exports.default = ConnectionPort;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvb2xzL0Nvbm5lY3Rpb25Qb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7RUFHRTs7O0FBRUYsK0NBQXlEO0FBQ3pELG9FQUFpRTtBQUVqRTtJQUVJOzs7Ozs7T0FNRztJQUNILFlBQ1csV0FBbUIsRUFDbkIsY0FBd0I7UUFEeEIsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsbUJBQWMsR0FBZCxjQUFjLENBQVU7UUFDL0IsY0FBYyxDQUFDLElBQUksQ0FBQyxxQ0FBaUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBSUQsMEJBQTBCO0lBQzFCLFlBQVksQ0FBQyxPQUFvQjtRQUM3QixPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUsseUJBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFXLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUNyRCxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsT0FBTyxDQUFDLFFBQVEsOEJBQThCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUYsQ0FBQztRQUNMLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEMsQ0FBQztJQUNMLENBQUM7SUFBQSxDQUFDO0lBRUYsY0FBYyxDQUFDLE9BQW9CO1FBQy9CLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDeEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixDQUFDO0lBQ0wsQ0FBQztDQUdKO0FBRUQsa0JBQWUsY0FBYyxDQUFDIiwiZmlsZSI6InRvb2xzL0Nvbm5lY3Rpb25Qb3J0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuKiDmir3osaHljJbkuIDkuKrkuI7ov5znq6/ov57mjqXnmoTpgJrkv6Hnq6/lj6PjgILpgJrov4fov5nkuKrnsbvpmpTlvIDkuoblhoXpg6jku6PnoIHkuI7nlKjmiLflpJbpg6jlrp7njrDvvIznlKjmiLflj6/ku6XpgJrov4fku7vkvZXmlrnlvI/mnaXkuI7mnI3liqHlu7rnq4vov57mjqUs5p2l6L+b6KGM5raI5oGv55qE5Lyg6YCS44CCXHJcbiog6YCa5L+h56uv5Y+j5o+Q5L6b6ICF5b+F6aG76Ieq6KGM5aSE55CG56uv5Y+j56uv5Y+j6L+e5o6l5ZCO5bqU5b2T6YeH5Y+W55qE5o6q5pa9XHJcbiovXHJcblxyXG5pbXBvcnQgTWVzc2FnZURhdGEsIHsgTWVzc2FnZVR5cGUgfSBmcm9tICcuL01lc3NhZ2VEYXRhJztcclxuaW1wb3J0IHsgU2VydmljZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9zZXJ2aWNlL1NlcnZpY2VDb250cm9sbGVyJztcclxuXHJcbmFic3RyYWN0IGNsYXNzIENvbm5lY3Rpb25Qb3J0IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VOYW1lIOS9v+eUqOivpeaOpeWPo+eahOacjeWKoeWQjeensFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gaW1wb3J0U2VydmljZXMg6K+l5pyN5Yqh5byV55So55qE5aSW6YOo5pyN5Yqh5ZCNXHJcbiAgICAgKiBcclxuICAgICAqIEBtZW1iZXJPZiBDb25uZWN0aW9uUG9ydFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgc2VydmljZU5hbWU6IHN0cmluZyxcclxuICAgICAgICBwdWJsaWMgaW1wb3J0U2VydmljZXM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgaW1wb3J0U2VydmljZXMucHVzaChTZXJ2aWNlQ29udHJvbGxlci5jb250cm9sbGVyTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgX29uTWVzc2FnZTogKG1lc3NhZ2U6IE1lc3NhZ2VEYXRhKSA9PiB2b2lkOyAgICAgICAgIC8v5o6l5Y+X5raI5oGvXHJcblxyXG4gICAgLy/lhoXpg6jlj5HpgIHmtojmga/vvIzlnKjlj5HpgIHmtojmga/liY3kvJrlr7nlj5HpgIHnmoTmtojmga/ov5vooYzpqozor4FcclxuICAgIF9zZW5kTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlRGF0YSkge1xyXG4gICAgICAgIG1lc3NhZ2Uuc2VuZGVyID0gdGhpcy5zZXJ2aWNlTmFtZTtcclxuICAgICAgICBpZiAoIXRoaXMuaW1wb3J0U2VydmljZXMuaW5jbHVkZXMobWVzc2FnZS5yZWNlaXZlcikpIHtcclxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gTWVzc2FnZVR5cGUuaW52b2tlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vbk1lc3NhZ2UoTWVzc2FnZURhdGEucHJlcGFyZVJlc3BvbnNlSW52b2tlKG1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IEVycm9yKGBUaGUgY2FsbGluZyBzZXJ2aWNlICcke21lc3NhZ2UucmVjZWl2ZXJ9JyBpcyBub3QgaW4gdGhlIHNlcnZpY2UgbGlzdGApKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9uU2VuZE1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZWNlaXZlTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlRGF0YSkge1xyXG4gICAgICAgIGlmIChtZXNzYWdlLnJlY2VpdmVyID09PSB0aGlzLnNlcnZpY2VOYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uTWVzc2FnZShtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWJzdHJhY3Qgb25TZW5kTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlRGF0YSk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbm5lY3Rpb25Qb3J0OyJdfQ==
