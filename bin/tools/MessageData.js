"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 消息的类型
 */
var MessageType;
(function (MessageType) {
    MessageType[MessageType["invoke"] = 0] = "invoke";
    MessageType[MessageType["event"] = 1] = "event";
    MessageType[MessageType["response"] = 2] = "response"; //回复调用
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/*
*   代表一条发送的消息
*/
class MessageData {
    //是不是私有的方法或时间
    static prepareSendInvoke(isPrivate, receiver, triggerName, args) {
        const result = new MessageData();
        result.isPrivate = isPrivate;
        result.receiver = receiver;
        result.triggerName = triggerName;
        result.args = args;
        result.callback = Math.random().toString();
        result.type = MessageType.invoke;
        return result;
    }
    static prepareResponseInvoke(invokeMessage, err, returnData) {
        const result = new MessageData();
        result.callback = invokeMessage.callback;
        result.receiver = invokeMessage.sender;
        if (err !== undefined) {
            result.error = {
                message: err.message,
                stack: err.stack
            };
        }
        else {
            result.args = returnData;
        }
        result.type = MessageType.response;
        return result;
    }
    static prepareSendEvent(isPrivate, triggerName, args) {
        const result = new MessageData();
        result.isPrivate = isPrivate;
        result.triggerName = triggerName;
        result.args = args;
        result.type = MessageType.event;
        return result;
    }
}
exports.default = MessageData;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvb2xzL01lc3NhZ2VEYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0dBRUc7QUFDSCxJQUFZLFdBSVg7QUFKRCxXQUFZLFdBQVc7SUFDbkIsaURBQU0sQ0FBQTtJQUNOLCtDQUFLLENBQUE7SUFDTCxxREFBUSxDQUFBLENBQUksTUFBTTtBQUN0QixDQUFDLEVBSlcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFJdEI7QUFFRDs7RUFFRTtBQUNGO0lBUWdELEFBRTVDLGFBRnlEO0lBRXpELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxTQUFrQixFQUFDLFFBQWdCLEVBQUUsV0FBbUIsRUFBRSxJQUFnQjtRQUMvRixNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBRWpDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRW5CLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUVqQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNLENBQUMscUJBQXFCLENBQUMsYUFBMEIsRUFBRSxHQUFzQixFQUFFLFVBQWdCO1FBQzdGLE1BQU0sTUFBTSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFFakMsTUFBTSxDQUFDLFFBQVEsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUV2QyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNwQixNQUFNLENBQUMsS0FBSyxHQUFHO2dCQUNYLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTztnQkFDcEIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO2FBQ25CLENBQUM7UUFDTixDQUFDO1FBQUMsSUFBSSxDQUFBLENBQUM7WUFDSCxNQUFNLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztRQUM3QixDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO1FBRW5DLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFrQixFQUFHLFdBQW1CLEVBQUUsSUFBZ0I7UUFDOUUsTUFBTSxNQUFNLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUVqQyxNQUFNLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUM3QixNQUFNLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUNqQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVuQixNQUFNLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFFaEMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0NBQ0o7QUF2REQsOEJBdURDIiwiZmlsZSI6InRvb2xzL01lc3NhZ2VEYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOa2iOaBr+eahOexu+Wei1xyXG4gKi9cclxuZXhwb3J0IGVudW0gTWVzc2FnZVR5cGUge1xyXG4gICAgaW52b2tlLCAgICAgLy/osIPnlKhcclxuICAgIGV2ZW50LCAgICAgIC8v6Kem5Y+R5LqL5Lu2XHJcbiAgICByZXNwb25zZSAgICAvL+WbnuWkjeiwg+eUqFxyXG59XHJcblxyXG4vKlxyXG4qICAg5Luj6KGo5LiA5p2h5Y+R6YCB55qE5raI5oGvXHJcbiovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lc3NhZ2VEYXRhIHtcclxuICAgIHNlbmRlcj86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/lj5HpgIHogIXlkI3np7BcclxuICAgIHR5cGU6IE1lc3NhZ2VUeXBlOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy/mtojmga/nsbvlnotcclxuICAgIHRyaWdnZXJOYW1lPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgLy/opoHop6blj5Hmlrnms5XmiJbkuovku7bnmoTlkI3np7BcclxuICAgIHJlY2VpdmVyPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy/mjqXlj5fogIXnmoTlkI3np7BcclxuICAgIGNhbGxiYWNrPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpzpnIDopoHlm57lpI3lj5HpgIHogIXvvIzlm57lpI3mtojmga/nmoTllK/kuIDooajor4ZcclxuICAgIGFyZ3M6IGFueTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/kvKDpgJLnmoTlj4LmlbBcclxuICAgIGVycm9yPzogeyBtZXNzYWdlOiBzdHJpbmcsIHN0YWNrOiBzdHJpbmcgfTsgLy/osIPnlKjov5znqIvmlrnms5Xlh7rplJlcclxuICAgIGlzUHJpdmF0ZT86IGJvb2xlYW47ICAgICAgICAgICAgICAgICAgICAgICAgLy/mmK/kuI3mmK/np4HmnInnmoTmlrnms5XmiJbml7bpl7RcclxuXHJcbiAgICBzdGF0aWMgcHJlcGFyZVNlbmRJbnZva2UoaXNQcml2YXRlOiBib29sZWFuLHJlY2VpdmVyOiBzdHJpbmcsIHRyaWdnZXJOYW1lOiBzdHJpbmcsIGFyZ3M6IEFycmF5PGFueT4pIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWVzc2FnZURhdGEoKTtcclxuXHJcbiAgICAgICAgcmVzdWx0LmlzUHJpdmF0ZSA9IGlzUHJpdmF0ZTtcclxuICAgICAgICByZXN1bHQucmVjZWl2ZXIgPSByZWNlaXZlcjtcclxuICAgICAgICByZXN1bHQudHJpZ2dlck5hbWUgPSB0cmlnZ2VyTmFtZTtcclxuICAgICAgICByZXN1bHQuYXJncyA9IGFyZ3M7XHJcblxyXG4gICAgICAgIHJlc3VsdC5jYWxsYmFjayA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKTtcclxuICAgICAgICByZXN1bHQudHlwZSA9IE1lc3NhZ2VUeXBlLmludm9rZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcHJlcGFyZVJlc3BvbnNlSW52b2tlKGludm9rZU1lc3NhZ2U6IE1lc3NhZ2VEYXRhLCBlcnI6IHVuZGVmaW5lZCB8IEVycm9yLCByZXR1cm5EYXRhPzogYW55KSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1lc3NhZ2VEYXRhKCk7XHJcblxyXG4gICAgICAgIHJlc3VsdC5jYWxsYmFjayA9IGludm9rZU1lc3NhZ2UuY2FsbGJhY2s7XHJcbiAgICAgICAgcmVzdWx0LnJlY2VpdmVyID0gaW52b2tlTWVzc2FnZS5zZW5kZXI7XHJcblxyXG4gICAgICAgIGlmIChlcnIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXN1bHQuZXJyb3IgPSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcclxuICAgICAgICAgICAgICAgIHN0YWNrOiBlcnIuc3RhY2tcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2V7XHJcbiAgICAgICAgICAgIHJlc3VsdC5hcmdzID0gcmV0dXJuRGF0YTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc3VsdC50eXBlID0gTWVzc2FnZVR5cGUucmVzcG9uc2U7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHByZXBhcmVTZW5kRXZlbnQoaXNQcml2YXRlOiBib29sZWFuLCAgdHJpZ2dlck5hbWU6IHN0cmluZywgYXJnczogQXJyYXk8YW55Pikge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNZXNzYWdlRGF0YSgpO1xyXG5cclxuICAgICAgICByZXN1bHQuaXNQcml2YXRlID0gaXNQcml2YXRlO1xyXG4gICAgICAgIHJlc3VsdC50cmlnZ2VyTmFtZSA9IHRyaWdnZXJOYW1lO1xyXG4gICAgICAgIHJlc3VsdC5hcmdzID0gYXJncztcclxuXHJcbiAgICAgICAgcmVzdWx0LnR5cGUgPSBNZXNzYWdlVHlwZS5ldmVudDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufSJdfQ==
