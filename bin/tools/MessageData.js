"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 消息的类型
 */
var MessageType;
(function (MessageType) {
    MessageType[MessageType["invoke"] = 0] = "invoke";
    MessageType[MessageType["event"] = 1] = "event";
    MessageType[MessageType["response"] = 2] = "response"; //回复调用
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/*
*   代表一条发送的消息
*/
class MessageData {
    //是不是私有的方法或时间
    static prepareSendInvoke(isPrivate, sender, receiver, triggerName, args) {
        const result = new MessageData();
        result.isPrivate = isPrivate;
        result.sender = sender;
        result.receiver = receiver;
        result.triggerName = triggerName;
        result.args = args;
        result.callback = Math.random().toString();
        result.type = MessageType.invoke;
        return result;
    }
    static prepareResponseInvoke(invokeMessage, err, returnData) {
        const result = new MessageData();
        result.callback = invokeMessage.callback;
        result.receiver = invokeMessage.sender;
        if (err !== undefined) {
            result.error = {
                message: err.message,
                stack: err.stack
            };
        }
        else {
            result.args = returnData;
        }
        result.type = MessageType.response;
        return result;
    }
    static prepareSendEvent(isPrivate, sender, triggerName, args) {
        const result = new MessageData();
        result.isPrivate = isPrivate;
        result.sender = sender;
        result.triggerName = triggerName;
        result.args = args;
        result.type = MessageType.event;
        return result;
    }
}
exports.default = MessageData;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvb2xzL01lc3NhZ2VEYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0dBRUc7QUFDSCxJQUFZLFdBSVg7QUFKRCxXQUFZLFdBQVc7SUFDbkIsaURBQU0sQ0FBQTtJQUNOLCtDQUFLLENBQUE7SUFDTCxxREFBUSxDQUFBLENBQUksTUFBTTtBQUN0QixDQUFDLEVBSlcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFJdEI7QUFFRDs7RUFFRTtBQUNGO0lBUWdELEFBRTVDLGFBRnlEO0lBRXpELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxTQUFrQixFQUFFLE1BQWMsRUFBRSxRQUFnQixFQUFFLFdBQW1CLEVBQUUsSUFBZ0I7UUFDaEgsTUFBTSxNQUFNLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUVqQyxNQUFNLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUM3QixNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUN2QixNQUFNLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUMzQixNQUFNLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUNqQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVuQixNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMzQyxNQUFNLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFFakMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsTUFBTSxDQUFDLHFCQUFxQixDQUFDLGFBQTBCLEVBQUUsR0FBc0IsRUFBRSxVQUFnQjtRQUM3RixNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBRWpDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUN6QyxNQUFNLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUM7UUFFdkMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsTUFBTSxDQUFDLEtBQUssR0FBRztnQkFDWCxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87Z0JBQ3BCLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSzthQUNuQixDQUFDO1FBQ04sQ0FBQztRQUFDLElBQUksQ0FBQSxDQUFDO1lBQ0gsTUFBTSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7UUFDN0IsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQztRQUVuQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBa0IsRUFBRSxNQUFjLEVBQUUsV0FBbUIsRUFBRSxJQUFnQjtRQUM3RixNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBRWpDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRW5CLE1BQU0sQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUVoQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FDSjtBQXpERCw4QkF5REMiLCJmaWxlIjoidG9vbHMvTWVzc2FnZURhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5raI5oGv55qE57G75Z6LXHJcbiAqL1xyXG5leHBvcnQgZW51bSBNZXNzYWdlVHlwZSB7XHJcbiAgICBpbnZva2UsICAgICAvL+iwg+eUqFxyXG4gICAgZXZlbnQsICAgICAgLy/op6blj5Hkuovku7ZcclxuICAgIHJlc3BvbnNlICAgIC8v5Zue5aSN6LCD55SoXHJcbn1cclxuXHJcbi8qXHJcbiogICDku6PooajkuIDmnaHlj5HpgIHnmoTmtojmga9cclxuKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVzc2FnZURhdGEge1xyXG4gICAgc2VuZGVyPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WPkemAgeiAheWQjeensFxyXG4gICAgdHlwZTogTWVzc2FnZVR5cGU7ICAgICAgICAgICAgICAgICAgICAgICAgICAvL+a2iOaBr+exu+Wei1xyXG4gICAgdHJpZ2dlck5hbWU/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAvL+imgeinpuWPkeaWueazleaIluS6i+S7tueahOWQjeensFxyXG4gICAgcmVjZWl2ZXI/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAvL+aOpeWPl+iAheeahOWQjeensFxyXG4gICAgY2FsbGJhY2s/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WmguaenOmcgOimgeWbnuWkjeWPkemAgeiAhe+8jOWbnuWkjea2iOaBr+eahOWUr+S4gOihqOivhlxyXG4gICAgYXJnczogYW55OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+S8oOmAkueahOWPguaVsFxyXG4gICAgZXJyb3I/OiB7IG1lc3NhZ2U6IHN0cmluZywgc3RhY2s6IHN0cmluZyB9OyAvL+iwg+eUqOi/nOeoi+aWueazleWHuumUmVxyXG4gICAgaXNQcml2YXRlPzogYm9vbGVhbjsgICAgICAgICAgICAgICAgICAgICAgICAvL+aYr+S4jeaYr+engeacieeahOaWueazleaIluaXtumXtFxyXG5cclxuICAgIHN0YXRpYyBwcmVwYXJlU2VuZEludm9rZShpc1ByaXZhdGU6IGJvb2xlYW4sIHNlbmRlcjogc3RyaW5nLCByZWNlaXZlcjogc3RyaW5nLCB0cmlnZ2VyTmFtZTogc3RyaW5nLCBhcmdzOiBBcnJheTxhbnk+KSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1lc3NhZ2VEYXRhKCk7XHJcblxyXG4gICAgICAgIHJlc3VsdC5pc1ByaXZhdGUgPSBpc1ByaXZhdGU7XHJcbiAgICAgICAgcmVzdWx0LnNlbmRlciA9IHNlbmRlcjtcclxuICAgICAgICByZXN1bHQucmVjZWl2ZXIgPSByZWNlaXZlcjtcclxuICAgICAgICByZXN1bHQudHJpZ2dlck5hbWUgPSB0cmlnZ2VyTmFtZTtcclxuICAgICAgICByZXN1bHQuYXJncyA9IGFyZ3M7XHJcblxyXG4gICAgICAgIHJlc3VsdC5jYWxsYmFjayA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKTtcclxuICAgICAgICByZXN1bHQudHlwZSA9IE1lc3NhZ2VUeXBlLmludm9rZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcHJlcGFyZVJlc3BvbnNlSW52b2tlKGludm9rZU1lc3NhZ2U6IE1lc3NhZ2VEYXRhLCBlcnI6IHVuZGVmaW5lZCB8IEVycm9yLCByZXR1cm5EYXRhPzogYW55KSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1lc3NhZ2VEYXRhKCk7XHJcblxyXG4gICAgICAgIHJlc3VsdC5jYWxsYmFjayA9IGludm9rZU1lc3NhZ2UuY2FsbGJhY2s7XHJcbiAgICAgICAgcmVzdWx0LnJlY2VpdmVyID0gaW52b2tlTWVzc2FnZS5zZW5kZXI7XHJcblxyXG4gICAgICAgIGlmIChlcnIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXN1bHQuZXJyb3IgPSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcclxuICAgICAgICAgICAgICAgIHN0YWNrOiBlcnIuc3RhY2tcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2V7XHJcbiAgICAgICAgICAgIHJlc3VsdC5hcmdzID0gcmV0dXJuRGF0YTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc3VsdC50eXBlID0gTWVzc2FnZVR5cGUucmVzcG9uc2U7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHByZXBhcmVTZW5kRXZlbnQoaXNQcml2YXRlOiBib29sZWFuLCBzZW5kZXI6IHN0cmluZywgdHJpZ2dlck5hbWU6IHN0cmluZywgYXJnczogQXJyYXk8YW55Pikge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNZXNzYWdlRGF0YSgpO1xyXG5cclxuICAgICAgICByZXN1bHQuaXNQcml2YXRlID0gaXNQcml2YXRlO1xyXG4gICAgICAgIHJlc3VsdC5zZW5kZXIgPSBzZW5kZXI7XHJcbiAgICAgICAgcmVzdWx0LnRyaWdnZXJOYW1lID0gdHJpZ2dlck5hbWU7XHJcbiAgICAgICAgcmVzdWx0LmFyZ3MgPSBhcmdzO1xyXG5cclxuICAgICAgICByZXN1bHQudHlwZSA9IE1lc3NhZ2VUeXBlLmV2ZW50O1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59Il19
