/*
*   基本服务的框架，
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MessageData_1 = require("../tools/MessageData");
const RemoteInvokeError_1 = require("../tools/RemoteInvokeError");
/*
* 这个类只提供了导出服务、发送事件的能力
*/
class BasicService {
    constructor(serviceName, port) {
        //导出的服务
        this.exportServices = {};
        //导出的内部服务
        this.exportPrivateServices = {};
        //回调方法列表
        this.callbackList = {};
        this.serviceName = serviceName;
        this.port = port;
        this.port.onMessage = (message) => {
            switch (message.type) {
                case MessageData_1.MessageType.invoke:
                    this._responseInvoke(message);
                    break;
                case MessageData_1.MessageType.response:
                    this._receiveInvoke(message);
                    break;
                case MessageData_1.MessageType.event:
                    this._receiveEvent(message);
                    break;
            }
        };
    }
    //调用远程请求
    sendInvoke(isPrivate, receiver, functionName, ...args) {
        return new Promise((resolve, reject) => {
            const message = MessageData_1.default.prepareSendInvoke(isPrivate, this.serviceName, receiver, functionName, args);
            this.callbackList[message.callback] = (err, data) => err ? reject(err) : resolve(data);
            this.port.sendMessage(message);
        });
    }
    //回复请求
    async _responseInvoke(message) {
        try {
            const service = message.isPrivate ? this.exportPrivateServices : this.exportServices;
            const result = await service[message.triggerName](...message.args);
            this.port.sendMessage(MessageData_1.default.prepareResponseInvoke(message, undefined, result));
        }
        catch (e) {
            this.port.sendMessage(MessageData_1.default.prepareResponseInvoke(message, e));
        }
    }
    //接收远端方法调用结果
    _receiveInvoke(message) {
        const callback = this.callbackList[message.callback];
        this.callbackList[message.callback] = undefined;
        if (callback !== undefined) {
            const err = message.error && new RemoteInvokeError_1.default(message.error);
            callback(err, message.args);
        }
    }
    //发送事件
    sendEvent(isPrivate, eventName, ...args) {
        this.port.sendMessage(MessageData_1.default.prepareSendEvent(isPrivate, this.serviceName, eventName, args));
    }
}
exports.default = BasicService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UvQmFzaWNTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztFQUVFOzs7QUFHRixzREFBZ0U7QUFDaEUsa0VBQTJEO0FBRzNEOztFQUVFO0FBQ0Y7SUFhSSxZQUFZLFdBQW1CLEVBQUUsSUFBb0I7UUFYckQsT0FBTztRQUNZLG1CQUFjLEdBQVEsRUFBRSxDQUFDO1FBQzVDLFNBQVM7UUFDVSwwQkFBcUIsR0FBUSxFQUFFLENBQUM7UUFLbkQsUUFBUTtRQUNTLGlCQUFZLEdBQVEsRUFBRSxDQUFDO1FBR3BDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWpCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsT0FBTztZQUMxQixNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbkIsS0FBSyx5QkFBVyxDQUFDLE1BQU07b0JBQ25CLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzlCLEtBQUssQ0FBQztnQkFDVixLQUFLLHlCQUFXLENBQUMsUUFBUTtvQkFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDN0IsS0FBSyxDQUFDO2dCQUNWLEtBQUsseUJBQVcsQ0FBQyxLQUFLO29CQUNsQixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUM1QixLQUFLLENBQUM7WUFDZCxDQUFDO1FBQ0wsQ0FBQyxDQUFBO0lBQ0wsQ0FBQztJQUVELFFBQVE7SUFDRSxVQUFVLENBQUMsU0FBa0IsRUFBRSxRQUFnQixFQUFFLFlBQW9CLEVBQUUsR0FBRyxJQUFXO1FBQzNGLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLE1BQU0sT0FBTyxHQUFHLHFCQUFXLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQXNCLEVBQUUsSUFBUyxLQUFLLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9HLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE1BQU07SUFDRSxLQUFLLENBQUMsZUFBZSxDQUFDLE9BQW9CO1FBQzlDLElBQUksQ0FBQztZQUNELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7WUFDckYsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25FLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLHFCQUFXLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3pGLENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RSxDQUFDO0lBQ0wsQ0FBQztJQUVELFlBQVk7SUFDSixjQUFjLENBQUMsT0FBb0I7UUFDdkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQ2hELEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSwyQkFBaUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEUsUUFBUSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNO0lBQ0ksU0FBUyxDQUFDLFNBQWtCLEVBQUUsU0FBaUIsRUFBRSxHQUFHLElBQVc7UUFDckUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0RyxDQUFDO0NBSUo7QUFFRCxrQkFBZSxZQUFZLENBQUMiLCJmaWxlIjoic2VydmljZS9CYXNpY1NlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4qICAg5Z+65pys5pyN5Yqh55qE5qGG5p6277yMXHJcbiovXHJcblxyXG5pbXBvcnQgQ29ubmVjdGlvblBvcnQgZnJvbSAnLi4vdG9vbHMvQ29ubmVjdGlvblBvcnQnO1xyXG5pbXBvcnQgTWVzc2FnZURhdGEsIHsgTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi4vdG9vbHMvTWVzc2FnZURhdGFcIjtcclxuaW1wb3J0IFJlbW90ZUludm9rZUVycm9yIGZyb20gXCIuLi90b29scy9SZW1vdGVJbnZva2VFcnJvclwiO1xyXG5cclxuXHJcbi8qXHJcbiog6L+Z5Liq57G75Y+q5o+Q5L6b5LqG5a+85Ye65pyN5Yqh44CB5Y+R6YCB5LqL5Lu255qE6IO95YqbXHJcbiovXHJcbmFic3RyYWN0IGNsYXNzIEJhc2ljU2VydmljZSB7XHJcblxyXG4gICAgLy/lr7zlh7rnmoTmnI3liqFcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBleHBvcnRTZXJ2aWNlczogYW55ID0ge307XHJcbiAgICAvL+WvvOWHuueahOWGhemDqOacjeWKoVxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGV4cG9ydFByaXZhdGVTZXJ2aWNlczogYW55ID0ge307XHJcbiAgICAvL+ivpeacjeWKoeeahOWQjeensFxyXG4gICAgcmVhZG9ubHkgc2VydmljZU5hbWU6IHN0cmluZztcclxuICAgIC8v6L+e5o6l55qE56uv5Y+jXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBvcnQ6IENvbm5lY3Rpb25Qb3J0O1xyXG4gICAgLy/lm57osIPmlrnms5XliJfooahcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2FsbGJhY2tMaXN0OiBhbnkgPSB7fTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlTmFtZTogc3RyaW5nLCBwb3J0OiBDb25uZWN0aW9uUG9ydCkge1xyXG4gICAgICAgIHRoaXMuc2VydmljZU5hbWUgPSBzZXJ2aWNlTmFtZTtcclxuICAgICAgICB0aGlzLnBvcnQgPSBwb3J0O1xyXG5cclxuICAgICAgICB0aGlzLnBvcnQub25NZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuaW52b2tlOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbnNlSW52b2tlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5yZXNwb25zZTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNlaXZlSW52b2tlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5ldmVudDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNlaXZlRXZlbnQobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy/osIPnlKjov5znqIvor7fmsYJcclxuICAgIHByb3RlY3RlZCBzZW5kSW52b2tlKGlzUHJpdmF0ZTogYm9vbGVhbiwgcmVjZWl2ZXI6IHN0cmluZywgZnVuY3Rpb25OYW1lOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gTWVzc2FnZURhdGEucHJlcGFyZVNlbmRJbnZva2UoaXNQcml2YXRlLCB0aGlzLnNlcnZpY2VOYW1lLCByZWNlaXZlciwgZnVuY3Rpb25OYW1lLCBhcmdzKTtcclxuICAgICAgICAgICAgdGhpcy5jYWxsYmFja0xpc3RbbWVzc2FnZS5jYWxsYmFja10gPSAoZXJyOiBSZW1vdGVJbnZva2VFcnJvciwgZGF0YTogYW55KSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMucG9ydC5zZW5kTWVzc2FnZShtZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvL+WbnuWkjeivt+axglxyXG4gICAgcHJpdmF0ZSBhc3luYyBfcmVzcG9uc2VJbnZva2UobWVzc2FnZTogTWVzc2FnZURhdGEpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBzZXJ2aWNlID0gbWVzc2FnZS5pc1ByaXZhdGUgPyB0aGlzLmV4cG9ydFByaXZhdGVTZXJ2aWNlcyA6IHRoaXMuZXhwb3J0U2VydmljZXM7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2VbbWVzc2FnZS50cmlnZ2VyTmFtZV0oLi4ubWVzc2FnZS5hcmdzKTtcclxuICAgICAgICAgICAgdGhpcy5wb3J0LnNlbmRNZXNzYWdlKE1lc3NhZ2VEYXRhLnByZXBhcmVSZXNwb25zZUludm9rZShtZXNzYWdlLCB1bmRlZmluZWQsIHJlc3VsdCkpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wb3J0LnNlbmRNZXNzYWdlKE1lc3NhZ2VEYXRhLnByZXBhcmVSZXNwb25zZUludm9rZShtZXNzYWdlLCBlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8v5o6l5pS26L+c56uv5pa55rOV6LCD55So57uT5p6cXHJcbiAgICBwcml2YXRlIF9yZWNlaXZlSW52b2tlKG1lc3NhZ2U6IE1lc3NhZ2VEYXRhKSB7XHJcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB0aGlzLmNhbGxiYWNrTGlzdFttZXNzYWdlLmNhbGxiYWNrXTtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrTGlzdFttZXNzYWdlLmNhbGxiYWNrXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zdCBlcnIgPSBtZXNzYWdlLmVycm9yICYmIG5ldyBSZW1vdGVJbnZva2VFcnJvcihtZXNzYWdlLmVycm9yKTtcclxuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBtZXNzYWdlLmFyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL+WPkemAgeS6i+S7tlxyXG4gICAgcHJvdGVjdGVkIHNlbmRFdmVudChpc1ByaXZhdGU6IGJvb2xlYW4sIGV2ZW50TmFtZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIHRoaXMucG9ydC5zZW5kTWVzc2FnZShNZXNzYWdlRGF0YS5wcmVwYXJlU2VuZEV2ZW50KGlzUHJpdmF0ZSwgdGhpcy5zZXJ2aWNlTmFtZSwgZXZlbnROYW1lLCBhcmdzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy/mjqXmlLbkuovku7ZcclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBfcmVjZWl2ZUV2ZW50KG1lc3NhZ2U6IE1lc3NhZ2VEYXRhKTp2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCYXNpY1NlcnZpY2U7Il19
