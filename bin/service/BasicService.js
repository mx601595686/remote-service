/*
*   基本服务的框架，
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MessageData_1 = require("../tools/MessageData");
const RemoteInvokeError_1 = require("../tools/RemoteInvokeError");
/*
* 这个类只提供了导出服务、发送事件的能力
*/
class BasicService {
    constructor(serviceName, port) {
        //导出的服务
        this.exportServices = {};
        //导出的内部服务
        this.exportPrivateServices = {};
        //回调方法列表
        this.callbackList = {};
        this.serviceName = serviceName;
        this.port = port;
        this.port.onMessage = (message) => {
            switch (message.type) {
                case MessageData_1.MessageType.invoke:
                    this._responseInvoke(message);
                    break;
                case MessageData_1.MessageType.response:
                    this._receiveInvoke(message);
                    break;
                case MessageData_1.MessageType.event:
                    this._receiveEvent(message);
                    break;
            }
        };
    }
    //调用远程请求
    sendInvoke(isPrivate, receiver, functionName, ...args) {
        return new Promise((resolve, reject) => {
            const message = MessageData_1.default.prepareSendInvoke(isPrivate, this.serviceName, receiver, functionName, args);
            this.callbackList[message.callback] = (err, data) => err ? reject(err) : resolve(data);
            this.port.sendMessage(message);
        });
    }
    //回复请求
    async _responseInvoke(message) {
        try {
            const service = message.isPrivate ? this.exportPrivateServices : this.exportServices;
            const result = await service[message.triggerName](...message.args);
            this.port.sendMessage(MessageData_1.default.prepareResponseInvoke(message, undefined, result));
        }
        catch (e) {
            this.port.sendMessage(MessageData_1.default.prepareResponseInvoke(message, e));
        }
    }
    //接收远端方法调用结果
    _receiveInvoke(message) {
        const callback = this.callbackList[message.callback];
        this.callbackList[message.callback] = undefined;
        if (callback !== undefined) {
            callback(new RemoteInvokeError_1.default(message.error), message.args);
        }
    }
    //发送事件
    sendEvent(isPrivate, eventName, ...args) {
        this.port.sendMessage(MessageData_1.default.prepareSendEvent(isPrivate, this.serviceName, eventName, args));
    }
}
exports.default = BasicService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UvQmFzaWNTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztFQUVFOzs7QUFHRixzREFBZ0U7QUFDaEUsa0VBQTJEO0FBRzNEOztFQUVFO0FBQ0Y7SUFhSSxZQUFZLFdBQW1CLEVBQUUsSUFBb0I7UUFYckQsT0FBTztRQUNZLG1CQUFjLEdBQVEsRUFBRSxDQUFDO1FBQzVDLFNBQVM7UUFDVSwwQkFBcUIsR0FBUSxFQUFFLENBQUM7UUFLbkQsUUFBUTtRQUNTLGlCQUFZLEdBQVEsRUFBRSxDQUFDO1FBR3BDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWpCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsT0FBTztZQUMxQixNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbkIsS0FBSyx5QkFBVyxDQUFDLE1BQU07b0JBQ25CLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzlCLEtBQUssQ0FBQztnQkFDVixLQUFLLHlCQUFXLENBQUMsUUFBUTtvQkFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDN0IsS0FBSyxDQUFDO2dCQUNWLEtBQUsseUJBQVcsQ0FBQyxLQUFLO29CQUNsQixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUM1QixLQUFLLENBQUM7WUFDZCxDQUFDO1FBQ0wsQ0FBQyxDQUFBO0lBQ0wsQ0FBQztJQUVELFFBQVE7SUFDRSxVQUFVLENBQUMsU0FBa0IsRUFBRSxRQUFnQixFQUFFLFlBQW9CLEVBQUUsR0FBRyxJQUFXO1FBQzNGLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLE1BQU0sT0FBTyxHQUFHLHFCQUFXLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQXNCLEVBQUUsSUFBUyxLQUFLLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9HLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE1BQU07SUFDRSxLQUFLLENBQUMsZUFBZSxDQUFDLE9BQW9CO1FBQzlDLElBQUksQ0FBQztZQUNELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7WUFDckYsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25FLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLHFCQUFXLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3pGLENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RSxDQUFDO0lBQ0wsQ0FBQztJQUVELFlBQVk7SUFDSixjQUFjLENBQUMsT0FBb0I7UUFDdkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQ2hELEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLFFBQVEsQ0FBQyxJQUFJLDJCQUFpQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakUsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNO0lBQ0ksU0FBUyxDQUFDLFNBQWtCLEVBQUUsU0FBaUIsRUFBRSxHQUFHLElBQVc7UUFDckUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0RyxDQUFDO0NBSUo7QUFFRCxrQkFBZSxZQUFZLENBQUMiLCJmaWxlIjoic2VydmljZS9CYXNpY1NlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4qICAg5Z+65pys5pyN5Yqh55qE5qGG5p6277yMXHJcbiovXHJcblxyXG5pbXBvcnQgQ29ubmVjdGlvblBvcnQgZnJvbSAnLi4vdG9vbHMvQ29ubmVjdGlvblBvcnQnO1xyXG5pbXBvcnQgTWVzc2FnZURhdGEsIHsgTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi4vdG9vbHMvTWVzc2FnZURhdGFcIjtcclxuaW1wb3J0IFJlbW90ZUludm9rZUVycm9yIGZyb20gXCIuLi90b29scy9SZW1vdGVJbnZva2VFcnJvclwiO1xyXG5cclxuXHJcbi8qXHJcbiog6L+Z5Liq57G75Y+q5o+Q5L6b5LqG5a+85Ye65pyN5Yqh44CB5Y+R6YCB5LqL5Lu255qE6IO95YqbXHJcbiovXHJcbmFic3RyYWN0IGNsYXNzIEJhc2ljU2VydmljZSB7XHJcblxyXG4gICAgLy/lr7zlh7rnmoTmnI3liqFcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBleHBvcnRTZXJ2aWNlczogYW55ID0ge307XHJcbiAgICAvL+WvvOWHuueahOWGhemDqOacjeWKoVxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGV4cG9ydFByaXZhdGVTZXJ2aWNlczogYW55ID0ge307XHJcbiAgICAvL+ivpeacjeWKoeeahOWQjeensFxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHNlcnZpY2VOYW1lOiBzdHJpbmc7XHJcbiAgICAvL+i/nuaOpeeahOerr+WPo1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwb3J0OiBDb25uZWN0aW9uUG9ydDtcclxuICAgIC8v5Zue6LCD5pa55rOV5YiX6KGoXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNhbGxiYWNrTGlzdDogYW55ID0ge307XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc2VydmljZU5hbWU6IHN0cmluZywgcG9ydDogQ29ubmVjdGlvblBvcnQpIHtcclxuICAgICAgICB0aGlzLnNlcnZpY2VOYW1lID0gc2VydmljZU5hbWU7XHJcbiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcclxuXHJcbiAgICAgICAgdGhpcy5wb3J0Lm9uTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLmludm9rZTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNwb25zZUludm9rZShtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUucmVzcG9uc2U6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjZWl2ZUludm9rZShtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuZXZlbnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjZWl2ZUV2ZW50KG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8v6LCD55So6L+c56iL6K+35rGCXHJcbiAgICBwcm90ZWN0ZWQgc2VuZEludm9rZShpc1ByaXZhdGU6IGJvb2xlYW4sIHJlY2VpdmVyOiBzdHJpbmcsIGZ1bmN0aW9uTmFtZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IE1lc3NhZ2VEYXRhLnByZXBhcmVTZW5kSW52b2tlKGlzUHJpdmF0ZSwgdGhpcy5zZXJ2aWNlTmFtZSwgcmVjZWl2ZXIsIGZ1bmN0aW9uTmFtZSwgYXJncyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tMaXN0W21lc3NhZ2UuY2FsbGJhY2tdID0gKGVycjogUmVtb3RlSW52b2tlRXJyb3IsIGRhdGE6IGFueSkgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLnBvcnQuc2VuZE1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy/lm57lpI3or7fmsYJcclxuICAgIHByaXZhdGUgYXN5bmMgX3Jlc3BvbnNlSW52b2tlKG1lc3NhZ2U6IE1lc3NhZ2VEYXRhKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3Qgc2VydmljZSA9IG1lc3NhZ2UuaXNQcml2YXRlID8gdGhpcy5leHBvcnRQcml2YXRlU2VydmljZXMgOiB0aGlzLmV4cG9ydFNlcnZpY2VzO1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZXJ2aWNlW21lc3NhZ2UudHJpZ2dlck5hbWVdKC4uLm1lc3NhZ2UuYXJncyk7XHJcbiAgICAgICAgICAgIHRoaXMucG9ydC5zZW5kTWVzc2FnZShNZXNzYWdlRGF0YS5wcmVwYXJlUmVzcG9uc2VJbnZva2UobWVzc2FnZSwgdW5kZWZpbmVkLCByZXN1bHQpKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9ydC5zZW5kTWVzc2FnZShNZXNzYWdlRGF0YS5wcmVwYXJlUmVzcG9uc2VJbnZva2UobWVzc2FnZSwgZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL+aOpeaUtui/nOerr+aWueazleiwg+eUqOe7k+aenFxyXG4gICAgcHJpdmF0ZSBfcmVjZWl2ZUludm9rZShtZXNzYWdlOiBNZXNzYWdlRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpcy5jYWxsYmFja0xpc3RbbWVzc2FnZS5jYWxsYmFja107XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja0xpc3RbbWVzc2FnZS5jYWxsYmFja10gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sobmV3IFJlbW90ZUludm9rZUVycm9yKG1lc3NhZ2UuZXJyb3IpLCBtZXNzYWdlLmFyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL+WPkemAgeS6i+S7tlxyXG4gICAgcHJvdGVjdGVkIHNlbmRFdmVudChpc1ByaXZhdGU6IGJvb2xlYW4sIGV2ZW50TmFtZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIHRoaXMucG9ydC5zZW5kTWVzc2FnZShNZXNzYWdlRGF0YS5wcmVwYXJlU2VuZEV2ZW50KGlzUHJpdmF0ZSwgdGhpcy5zZXJ2aWNlTmFtZSwgZXZlbnROYW1lLCBhcmdzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy/mjqXmlLbkuovku7ZcclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBfcmVjZWl2ZUV2ZW50KG1lc3NhZ2U6IE1lc3NhZ2VEYXRhKTp2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCYXNpY1NlcnZpY2U7Il19
