/*
*   基本服务的框架，
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MessageData_1 = require("../tools/MessageData");
const RemoteInvokeError_1 = require("../tools/RemoteInvokeError");
/*
* 这个类只提供了导出服务、发送事件的能力
*/
class BasicService {
    constructor(port) {
        //导出的服务
        this.exportServices = {};
        //导出的内部服务
        this.exportPrivateServices = {};
        //回调方法列表
        this.callbackList = {};
        this.port = port;
        this.port._onMessage = (message) => {
            switch (message.type) {
                case MessageData_1.MessageType.invoke:
                    this._responseInvoke(message);
                    break;
                case MessageData_1.MessageType.response:
                    this._receiveInvoke(message);
                    break;
                case MessageData_1.MessageType.event:
                    this._receiveEvent(message);
                    break;
            }
        };
    }
    //调用远程请求
    sendInvoke(isPrivate, receiver, functionName, ...args) {
        return new Promise((resolve, reject) => {
            const message = MessageData_1.default.prepareSendInvoke(isPrivate, receiver, functionName, args);
            this.callbackList[message.callback] = (err, data) => err ? reject(err) : resolve(data);
            this.port._sendMessage(message);
        });
    }
    //回复请求
    async _responseInvoke(message) {
        try {
            const service = message.isPrivate ? this.exportPrivateServices : this.exportServices;
            const result = await service[message.triggerName](...message.args);
            this.port._sendMessage(MessageData_1.default.prepareResponseInvoke(message, undefined, result));
        }
        catch (e) {
            this.port._sendMessage(MessageData_1.default.prepareResponseInvoke(message, e));
        }
    }
    //接收远端方法调用结果
    _receiveInvoke(message) {
        const callback = this.callbackList[message.callback];
        this.callbackList[message.callback] = undefined;
        if (callback !== undefined) {
            const err = message.error && new RemoteInvokeError_1.default(message.error);
            callback(err, message.args);
        }
    }
    //发送事件
    sendEvent(isPrivate, eventName, ...args) {
        this.port._sendMessage(MessageData_1.default.prepareSendEvent(isPrivate, eventName, args));
    }
}
exports.default = BasicService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UvQmFzaWNTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztFQUVFOzs7QUFHRixzREFBZ0U7QUFDaEUsa0VBQTJEO0FBRzNEOztFQUVFO0FBQ0Y7SUFXSSxZQUFZLElBQW9CO1FBVGhDLE9BQU87UUFDWSxtQkFBYyxHQUFRLEVBQUUsQ0FBQztRQUM1QyxTQUFTO1FBQ1UsMEJBQXFCLEdBQVEsRUFBRSxDQUFDO1FBR25ELFFBQVE7UUFDUyxpQkFBWSxHQUFRLEVBQUUsQ0FBQztRQUdwQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVqQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLE9BQU87WUFDM0IsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ25CLEtBQUsseUJBQVcsQ0FBQyxNQUFNO29CQUNuQixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUM5QixLQUFLLENBQUM7Z0JBQ1YsS0FBSyx5QkFBVyxDQUFDLFFBQVE7b0JBQ3JCLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzdCLEtBQUssQ0FBQztnQkFDVixLQUFLLHlCQUFXLENBQUMsS0FBSztvQkFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDNUIsS0FBSyxDQUFDO1lBQ2QsQ0FBQztRQUNMLENBQUMsQ0FBQTtJQUNMLENBQUM7SUFFRCxRQUFRO0lBQ0UsVUFBVSxDQUFDLFNBQWtCLEVBQUUsUUFBZ0IsRUFBRSxZQUFvQixFQUFFLEdBQUcsSUFBVztRQUMzRixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUMvQixNQUFNLE9BQU8sR0FBRyxxQkFBVyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZGLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBc0IsRUFBRSxJQUFTLEtBQUssR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0csSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTTtJQUNFLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBb0I7UUFDOUMsSUFBSSxDQUFDO1lBQ0QsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUNyRixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkUsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDMUYsQ0FBQztRQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBVyxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFFLENBQUM7SUFDTCxDQUFDO0lBRUQsWUFBWTtJQUNKLGNBQWMsQ0FBQyxPQUFvQjtRQUN2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxTQUFTLENBQUM7UUFDaEQsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDekIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLDJCQUFpQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsRSxRQUFRLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU07SUFDSSxTQUFTLENBQUMsU0FBa0IsRUFBRSxTQUFpQixFQUFFLEdBQUcsSUFBVztRQUNyRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBVyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDO0NBSUo7QUFFRCxrQkFBZSxZQUFZLENBQUMiLCJmaWxlIjoic2VydmljZS9CYXNpY1NlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4qICAg5Z+65pys5pyN5Yqh55qE5qGG5p6277yMXHJcbiovXHJcblxyXG5pbXBvcnQgQ29ubmVjdGlvblBvcnQgZnJvbSAnLi4vdG9vbHMvQ29ubmVjdGlvblBvcnQnO1xyXG5pbXBvcnQgTWVzc2FnZURhdGEsIHsgTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi4vdG9vbHMvTWVzc2FnZURhdGFcIjtcclxuaW1wb3J0IFJlbW90ZUludm9rZUVycm9yIGZyb20gXCIuLi90b29scy9SZW1vdGVJbnZva2VFcnJvclwiO1xyXG5cclxuXHJcbi8qXHJcbiog6L+Z5Liq57G75Y+q5o+Q5L6b5LqG5a+85Ye65pyN5Yqh44CB5Y+R6YCB5LqL5Lu255qE6IO95YqbXHJcbiovXHJcbmFic3RyYWN0IGNsYXNzIEJhc2ljU2VydmljZSB7XHJcblxyXG4gICAgLy/lr7zlh7rnmoTmnI3liqFcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBleHBvcnRTZXJ2aWNlczogYW55ID0ge307XHJcbiAgICAvL+WvvOWHuueahOWGhemDqOacjeWKoVxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGV4cG9ydFByaXZhdGVTZXJ2aWNlczogYW55ID0ge307XHJcbiAgICAvL+i/nuaOpeeahOerr+WPo1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwb3J0OiBDb25uZWN0aW9uUG9ydDtcclxuICAgIC8v5Zue6LCD5pa55rOV5YiX6KGoXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNhbGxiYWNrTGlzdDogYW55ID0ge307XHJcblxyXG4gICAgY29uc3RydWN0b3IocG9ydDogQ29ubmVjdGlvblBvcnQpIHtcclxuICAgICAgICB0aGlzLnBvcnQgPSBwb3J0O1xyXG5cclxuICAgICAgICB0aGlzLnBvcnQuX29uTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLmludm9rZTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNwb25zZUludm9rZShtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUucmVzcG9uc2U6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjZWl2ZUludm9rZShtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuZXZlbnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjZWl2ZUV2ZW50KG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8v6LCD55So6L+c56iL6K+35rGCXHJcbiAgICBwcm90ZWN0ZWQgc2VuZEludm9rZShpc1ByaXZhdGU6IGJvb2xlYW4sIHJlY2VpdmVyOiBzdHJpbmcsIGZ1bmN0aW9uTmFtZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IE1lc3NhZ2VEYXRhLnByZXBhcmVTZW5kSW52b2tlKGlzUHJpdmF0ZSwgcmVjZWl2ZXIsIGZ1bmN0aW9uTmFtZSwgYXJncyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tMaXN0W21lc3NhZ2UuY2FsbGJhY2tdID0gKGVycjogUmVtb3RlSW52b2tlRXJyb3IsIGRhdGE6IGFueSkgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLnBvcnQuX3NlbmRNZXNzYWdlKG1lc3NhZ2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8v5Zue5aSN6K+35rGCXHJcbiAgICBwcml2YXRlIGFzeW5jIF9yZXNwb25zZUludm9rZShtZXNzYWdlOiBNZXNzYWdlRGF0YSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZpY2UgPSBtZXNzYWdlLmlzUHJpdmF0ZSA/IHRoaXMuZXhwb3J0UHJpdmF0ZVNlcnZpY2VzIDogdGhpcy5leHBvcnRTZXJ2aWNlcztcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZVttZXNzYWdlLnRyaWdnZXJOYW1lXSguLi5tZXNzYWdlLmFyZ3MpO1xyXG4gICAgICAgICAgICB0aGlzLnBvcnQuX3NlbmRNZXNzYWdlKE1lc3NhZ2VEYXRhLnByZXBhcmVSZXNwb25zZUludm9rZShtZXNzYWdlLCB1bmRlZmluZWQsIHJlc3VsdCkpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wb3J0Ll9zZW5kTWVzc2FnZShNZXNzYWdlRGF0YS5wcmVwYXJlUmVzcG9uc2VJbnZva2UobWVzc2FnZSwgZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL+aOpeaUtui/nOerr+aWueazleiwg+eUqOe7k+aenFxyXG4gICAgcHJpdmF0ZSBfcmVjZWl2ZUludm9rZShtZXNzYWdlOiBNZXNzYWdlRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpcy5jYWxsYmFja0xpc3RbbWVzc2FnZS5jYWxsYmFja107XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja0xpc3RbbWVzc2FnZS5jYWxsYmFja10gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgZXJyID0gbWVzc2FnZS5lcnJvciAmJiBuZXcgUmVtb3RlSW52b2tlRXJyb3IobWVzc2FnZS5lcnJvcik7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgbWVzc2FnZS5hcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy/lj5HpgIHkuovku7ZcclxuICAgIHByb3RlY3RlZCBzZW5kRXZlbnQoaXNQcml2YXRlOiBib29sZWFuLCBldmVudE5hbWU6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcclxuICAgICAgICB0aGlzLnBvcnQuX3NlbmRNZXNzYWdlKE1lc3NhZ2VEYXRhLnByZXBhcmVTZW5kRXZlbnQoaXNQcml2YXRlLCBldmVudE5hbWUsIGFyZ3MpKTtcclxuICAgIH1cclxuXHJcbiAgICAvL+aOpeaUtuS6i+S7tlxyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IF9yZWNlaXZlRXZlbnQobWVzc2FnZTogTWVzc2FnZURhdGEpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCYXNpY1NlcnZpY2U7Il19
